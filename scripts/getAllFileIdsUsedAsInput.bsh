/*
 * Copyright 2018 Karlsruhe Institute of Technology.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************************
 * Description:
 *     Determine all file IDs for given group(s) and page(s).
 *     The resulting list contains only IDs matching both filters.
 **************************************************************************
 * Input parameter(s):
 * - String url 
 *            URL of the mets file.
 * - List<String> inputFileGroup 
 *            List of all file groups used as input.
 * - List<String> id 
 *            List of all pageIDs used as input.
 * ------------------------------------------------------------------------
 * Output parameter(s):
 * - ArrayList<String> inputFileId
 *            List of all file IDs matching both filters.
 **************************************************************************/
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.xml.namespace.NamespaceContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

// Clean up list with ids
    Iterator iterator = id.iterator();
    while (iterator.hasNext()) {
      if (iterator.next().trim().isEmpty()) {
        iterator.remove();
      }
    }


// Parse mets document
    DocumentBuilderFactory newInstance = DocumentBuilderFactory.newInstance();
    newInstance.setNamespaceAware(true);
    DocumentBuilder newDocumentBuilder = newInstance.newDocumentBuilder();
    Document document = newDocumentBuilder.parse(url);

// Prepare XPath
    XPath xPath = XPathFactory.newInstance().newXPath();
    NamespaceContext ctx = new NamespaceContext() {
      public String getNamespaceURI(String prefix) {
        return prefix.equals("mets") ? "http://www.loc.gov/METS/" : null;
      }

      public Iterator getPrefixes(String val) {
        return null;
      }

      public String getPrefix(String uri) {
        return null;
      }
    };
    xPath.setNamespaceContext(ctx);

// Collect all fileIDs from the groups
    HashSet allPossibleIds = new HashSet();
    for (int j = 0; j < inputFileGroup.size(); j++) {
      XPathExpression getAllIDsFromFileGrps = xPath.compile("//mets:fileGrp[@USE = '" + inputFileGroup.get(j) + "']/mets:file/@ID");
      Object result = getAllIDsFromFileGrps.evaluate(document, XPathConstants.NODESET);
      NodeList nodes = (NodeList) result;
      for (int i = 0; i < nodes.getLength(); i++) {
        Node currentItem = nodes.item(i);
        allPossibleIds.add(currentItem.getNodeValue());
      }
    }

    ArrayList inputFileId = new ArrayList();
//Filter if pageId is given
    if (!id.isEmpty()) {
      // Collect all fileIDs from the pageIDs
      HashSet allPossiblePageIds = new HashSet();
      for (int j = 0; j < id.size(); j++) {
        XPathExpression getAllIDsFromPageIds = xPath.compile("//mets:div[@TYPE = 'page' and @ID = '" + id.get(j) + "']/mets:fptr/@FILEID");
        Object result = getAllIDsFromPageIds.evaluate(document, XPathConstants.NODESET);
        NodeList nodes = (NodeList) result;
        for (int i = 0; i < nodes.getLength(); i++) {
          Node currentItem = nodes.item(i);
          allPossiblePageIds.add(currentItem.getNodeValue());
        }
      }
      // Filter by pageID
      Iterator iterator = allPossibleIds.iterator();
      while (iterator.hasNext()) {
        String fileId = iterator.next();
        if (allPossiblePageIds.contains(fileId)) {
          inputFileId.add(fileId);
        }
      }
    } else {
      Iterator iterator = allPossibleIds.iterator();
      while (iterator.hasNext()) {
        String fileId = iterator.next();
        inputFileId.add(fileId);
      }
    }
Collections.sort(inputFileId);
