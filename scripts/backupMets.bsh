/*
 * Copyright 2019 Karlsruhe Institute of Technology.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************************
 * Description:
 *     Duplicate file and 'predict' target file. 
 **************************************************************************
 * Input parameter(s):
 * - String index 
 *            Index of the actual step.
 * - String nextIndex 
 *            Index of the next step (9999 if actual step is the last step).
 * - String selectedFile
 *            Path of the original file.
 * - String uniquePostfix 
 *            unique postfix for file.
 * ------------------------------------------------------------------------
 * Output parameter(s):
 * - String workingMets 
 *            Path of the original file.
 * - String backupMets
 *            Path of the duplicate.
 * - String targetMets 
 *            Path of the predicted target file.
 **************************************************************************/
import java.io.File;
import java.nio.file.Path;
import java.text.DecimalFormat;

DecimalFormat formatter = new DecimalFormat("0000");
String metaDataSubDir = "/metadata";

int i = Integer.parseInt(index.trim());
Path selectedFilePath = new File(new URL(selectedFile).getPath()).toPath();
String path = selectedFilePath.toUri().getPath();
String parent = selectedFilePath.getParent().toUri().getPath();

File metaFileDir = new File(parent +  metaDataSubDir);
metaFileDir.mkdir();

String workingMets = path;
String backupMets = new String(metaFileDir.getPath() + File.separator + selectedFilePath.getFileName() + "."+ uniquePostfix + "_" + formatter.format(i));

cp(workingMets, backupMets); // Backup working file
// predict target file for this step. 
// if nextIndex == 9999 target will be the original file
int next = Integer.parseInt(nextIndex.trim());
if (9999 == next) {
  targetMets = workingMets;
} else {
  targetMets =  new String(metaFileDir.getPath() + File.separator + selectedFilePath.getFileName() + "."+ uniquePostfix + "_" + formatter.format(next));
}

